Saturday 03 March  2018
Cascading Style Sheet (CSS)
	*Language used to specify the presentation(e.g. layout,formatting fonts, colors, etc) of structurally marked up documents (e.g. HTML, XML, SYG, MathML, etc.)

	*Developed by Hakom Wium Lee (CHSS) and Bert Bos (BSP)
	@CHSS - Cascaded HTML Style Sheet
	@BSP - Stream based stylesheet proposal 

Version history 
	*CSS level 1 (CSS 1, W3C Recommendation, Dec 1996)
	*CSS level 2 (CSS 2, W3C Recommendation, May 1998)
	*CSS level 2 Revision 1 (CSS 2.1, W3C Recommendation Jun 2011)
	*CSS level 3 

	*Modular approach to CSS developoment (as opposed to the monolithic specification of CSS 2.1)   

HTML STYLESHEETS
	*Source of styles for HTML documents
		**author styles 
			*external (a.k.a. linked) stylesheet(recommended)
			*embeded (a.k.a. internal) stylesheet
			*inline styles
		**user styles 
			*Some browsers provide (non-standard) alternatives through plugins/extensions (e.g. stylish)
		**user agent styles 
			*sample default user agent stylesheet from css 2.1 
			*the source of style denotes its origin which is used in determining into precedence in the cascade

CSS STATEMENTS
	*At rules
	 @charset
	@import 
	@namespace
	@media
	@font space
	@key frames
CSS RULE SET 
	*consist of selector; followed by a brace-enclosed declaration block

CSS Selector
Selector Syntax:
	chain of one or more sequences of simpple selectors-separated by combinators with one pseudo-element possibly appended.
Selector Group: 
	Comma-separated list of selectors representing the union of all elements 

	Combinators:
		descendant combinator (whitespace)
		i.e space, tab, line feed, carriage rerturn, form, feed.
		Child Combinator(>)
		sibling Combinator
			Adjacent sibling Combinator(+)
			general sibling Combinator (-)

Simple selector:
	Universal Selector(*) 
	type Selector (p{background-color: #fff})
					(h1{color: rgba(255,0,0,0,5);})
	id Selector (#) e.g. #info
	class Selector
	attribute Selector - Type selector with brackets 
	pseudo classes(:)
		*dynamic pseudo-classes
			*link pseudo clsas (:link, :visited)
			*user action pseudo class  (:hover)
		*target pseudo class
			*:target
		*Language pseudo class 
			:lang()
		*UI element state pseudo class 
			:enable, :disable,:checked 
		*Structural pseudo class 
			:root
			:first-child
			:last-child
			:only-child
		*negation pseudo class
			:not()
			
CSS Rule Precedence 
	An HTML element may be the subject of the selectors of multiple style rules
	When such rules target diffferent properties their effects cacscade (i.e. one combines)
	When the styles involve the same properties they conflict and must be resolved with that only one style.

CSS Declarations 
	*properties 
		*Shorthand properties 
			allows author to specify the values of several properties with a single property 
			e.g. background, font, margin, padding, border, border-left, border-width, etc
		*vendor specific extensions (a.k.a vendor prefixes)
			used by browser vendors as prefixes for the names of experimental or non-standard CSS properties. lately, vendors are moving away from vendor prefixes in favor of user-controlled flags or preferences.
			e.g. -webkit-, -moz-, -o-, -ms, etc
		*custom properties (a.k.a. CSS variables (experimental))
			property names prefixed with --, representing a value that can be reused throughout the document using the var() function

	*Values
		*value processing 
			declared, cascaded, specified, computed, used, actual values
		*value types 
			keywords
				CSS-wide keywords 
					initial, inherit, unset
				property-specific keywords 
		numbers 
			integers or reals in(scientific) decimal notation
		dimensions 
			length, angle, duration(or time), frequency, resolution 
			length units:
				font-relative: em, ex, ch, rem
				viewport-percentage: vw, vh, vmin, vmax
				absolute: cm, mm ,in, pt, pc, px
			angle units:
				deg, grad, rad, turn 
				used in some gradient and transforms functions
			duration(or time) units 
CSS Preprocessors, Frameworks, and Polyfills
	*CSS preprocessors
		generates css using a custom language syntax that typically includes features that don't exist in pure css (e.g variables, control flow, nesting, mixins, functions, etc)

		e.g SASS, less, styles, etc.
	*CSS Framewroks
		provides predefined css design functionality that can be reused, extended, or customized. 
		e.g Bootstrap, Foundation, Materialize, etc
	*Polyfills
		Provide features that developers expect browsers to provide natively
		e.g. Modernizr, seletivizr, etc